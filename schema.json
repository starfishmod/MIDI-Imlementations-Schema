{
  "title": "A JSON Schema for Midi Implentation Schema.",
  "id": "http://mis/schema.json#",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "required": [
    "MIS",
    "info",
    "chart"
  ],
  "additionalProperties": false,
  "patternProperties": {
    "^x-": {
      "$ref": "#/definitions/vendorExtension"
    }
  },
  "properties": {
    "MIS": {
      "type": "string",
      "enum": [
        "0.9.1"
      ],
      "description": "The MIS version of this document."
    },
    "info": {
      "$ref": "#/definitions/info"
    },
    "chart": {
      "$ref": "#/definitions/chart"
    },
    "banks": {
      "$ref": "#/definitions/banks"
    },
    "controllers": {
      "$ref": "#/definitions/controllers"
    },
    "sysex": {
      "$ref": "#/definitions/sysex"
    }
  },
  "definitions": {
    "info": {
      "type": "object",
      "description": "General information about the device.",
      "required": [
        "manufacturer",
        "model",
        "date"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "manufacturer": {
          "$ref": "#/definitions/nameID"
        },
        "family": {
          "$ref": "#/definitions/nameID"
        },
        "model": {
          "$ref": "#/definitions/nameID"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date of this MIS."
        },
        "documentVersion": {
          "type": "string",
          "description": "A semantic version number of the MIS."
        },
        "deviceVersions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "description": "A list of model versions that this document refers to. This should be calculated from the Device Enquiry"
        },
        "author": {
          "type": "string",
          "description": "The original author of this implementation."
        },
        "contributors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "description": "Other authors who have worked on this implementation"
        }
      }
    },
    "nameID": {
      "type": "object",
      "description": "Simple object for holding a name and ID value.",
      "additionalProperties": false,
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The identifying name of the object."
        },
        "id": {
          "type": "integer",
          "description": "The id of the name used as reference"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "chart": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "midiChannels": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "noteNumbers": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "programChange": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "bankSelect": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "mode1": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "mode2": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "mode3": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "mode4": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "modeMulti": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "noteOnVelocity": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "noteOffVelocity": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "channelAftertouch": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "keyAftertouch": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "activeSense": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "systemReset": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "tuneRequest": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "midiClock": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "songPos": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "songSelect": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "start": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "continue": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "stop": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "MTC": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "MMC": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "MSC": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "GM": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "GM",
              "GM2",
              "GMLite",
              "GS",
              "XG"
            ]
          },
          "uniqueItems": true
        },
        "DLS": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DLS",
              "DLS2",
              "MobileDLS"
            ]
          },
          "uniqueItems": true
        },
        "SMF": {
          "type": "array",
          "items": {
            "type": "integer",
            "enum": [
              0,
              1,
              2
            ]
          },
          "uniqueItems": true
        },
        "SPMIDI": {
          "$ref": "#/definitions/recognizeTransmit"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    
    
    "banks":{
		"type": "object",
		"additionalProperties": false,
		"properties": {
			"PC": {
			  "$ref": "#/definitions/numberList"
			},
			"voiceBanks": {
			  "$ref": "#/definitions/voiceBanks"
			}
		},
		"patternProperties": {
			"^x-": {
			  "$ref": "#/definitions/vendorExtension"
			}
		}
    },
    "voiceList":{
		"type": "object",
		"additionalProperties": false,
		"properties": {
			"name": {
			  "type": "string"
			},
			"voices": {
			  "$ref": "#/definitions/numberList"
			},
			"drummaps": {
			  "$ref": "#/definitions/voiceBanks"
			}
		},
		"patternProperties": {
			"^x-": {
			  "$ref": "#/definitions/vendorExtension"
			}
		}
    },
    "voiceBanks":{
		"type": "object",
		"additionalProperties": false,
		"patternProperties": {
			"^(1[10][0-9]|12[0-7]|[0-9]{1,2})$": {
				"$ref": "#/definitions/voiceList"
			},
			"^x-": {
			  "$ref": "#/definitions/vendorExtension"
			}
		}
    },
    "numberList":{
		"type": "object",
		"additionalProperties": false,
		"patternProperties": {
			"^(1[10][0-9]|12[0-7]|[0-9]{1,2})$": {
				"type": "string"
			},
			"^x-": {
			  "$ref": "#/definitions/vendorExtension"
			}
		}
    },
    
    
    
    
    
    
    
    
    
    "controllers": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "CC": {
          "$ref": "#/definitions/CCList"
        },
        "NRPN": {
          "$ref": "#/definitions/NRPNList"
        },
        "RPN00": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "RPN01": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "RPN02": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "RPN03": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "RPN04": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "RPN05": {
          "$ref": "#/definitions/recognizeTransmit"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "recognizeTransmit": {
      "type": "object",
      "description": "Object for describing range in the Transmit/Export, Recognize/Import and Remarks columns in the MIDI Implementation Chart. Except this can have multiple ranges for different groups.",
      "additionalProperties": false,
      "required": [
        "transmit",
        "recognize"
      ],
      "properties": {
        "transmit": {
          "type": "boolean",
          "description": "If not set as true then it assumed false."
        },
        "recognize": {
          "type": "boolean",
          "description": "If not set as true then it assumed false."
        },
        "transmitRange": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Range"
          }
        },
        "recognizeRange": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Range"
          }
        },
        "name": {
          "type": "string",
          "description": "Name of the item. Usefut when used in NRPN's or in CC information where it is not the standard controller function."
        },
        "remarks": {
          "type": "string",
          "description": "Any further Information"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "Range": {
      "type": "object",
      "description": "Object for describing range.",
      "additionalProperties": false,
      "required": [
        "start",
        "stop"
      ],
      "properties": {
        "start": {
          "type": "integer",
          "description": "The lower limit"
        },
        "stop": {
          "type": "integer",
          "description": "The upper limit"
        },
        "name": {
          "type": "string",
          "description": "The Group the range belongs to."
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "CCList": {
      "type": "object",
      "description": "A list of the MIDI control change parameters available.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        },
        "^(1[10][0-9]|12[0-7]|[0-9]{1,2})$": {
          "$ref": "#/definitions/recognizeTransmit"
        }
      },
      "additionalProperties": false
    },
    "NRPNList": {
      "type": "object",
      "description": "A list of the MIDI NRPN parameters available.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        },
        "^(1[10][0-9]|12[0-7]|[0-9]{1,2})\/(1[10][0-9]|12[0-7]|[0-9]{1,2})$": {
          "$ref": "#/definitions/NRPNItem"
        }
      },
      "additionalProperties": false
    },
    "NRPNItem": {
      "type": "object",
      "description": "Describes how the NRPN Data works",
      "required": [
        "name",
        "transmit",
        "recognize"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this value that is being read or sent."
        },
        "type": {
          "type": "string",
          "description": "The value MUST be one of \"string\", \"number\", \"integer\" or \"boolean\". If not set integer is assumed.",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean"
          ]
        },
        "format": {
          "type": "string",
          "description": "This is the format of the data returned. i.e. note."
        },
        "expr": {
          "type": "string",
          "format": "expr",
          "description": "The expression to determine the values from the data"
        },
        "revExpr": {
          "type": "string",
          "format": "expr",
          "description": "The expression to determine the data from the values"
        },
        "max": {
          "type": "integer",
          "description": "The maximum number that should be set. Max is checked before after expr and before revExpr."
        },
        "min": {
          "type": "integer",
          "description": "The minimum number that should be set. Min is checked before after expr and before revExpr."
        },
        "map": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Map the value to this array of Strings to make it more human friendly."
        },
        "MSBOnly": {
          "type": "boolean",
          "description": "Only use the MSB of the NRPN. Assume LSB is not sent."
        },
        "transmit": {
          "type": "boolean",
          "description": "If not set as true then it assumed false."
        },
        "recognize": {
          "type": "boolean",
          "description": "If not set as true then it assumed false."
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "additionalProperties": false
    },
    "sysex": {
      "type": "object",
      "description": "Object for describing the Sysex available to the device.",
      "additionalProperties": false,
      "properties": {
        "sampleDumpStandard": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "deviceEnquiry": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "deviceEnquiryVersion": {
          "type": "string",
          "format": "expr",
          "description": "The expression on how to build the version number from the 4 version bytes"
        },
        "fileDump": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "midiTuning": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "masterVolume": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "midiBalance": {
          "$ref": "#/definitions/recognizeTransmit"
        },
        "exclusiveHeader": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "This is the header used on all Sysex queries. This will be an array of integers e.g. \"F0 42 3C 57\" becomes [240,66,60,87]"
        },
        
        "functions": {
          "$ref": "#/definitions/sysexFunction"
        },
        "definitions": {
          "$ref": "#/definitions/sysexDefinitions"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "sysexFunction": {
      "type": "object",
      "description": "Holds the relative paths to the individual Sysex calls as given by the Function Id.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        },
        "^(1[10][0-9]|12[0-7]|[0-9]{1,2})$": {
          "$ref": "#/definitions/sysexFunctionItem"
        }
      },
      "additionalProperties": false
    },
    "sysexFunctionItem": {
      "type": "object",
      "description": "Describes the operations available for a single function.",
      "additionalProperties": false,
      "required": [
        "name",
        "recognize",
        "transmit"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "What is the intended purpose of this Function"
        },
        "recognize": {
          "type": "boolean",
          "description": "Does the device recogize this functions data"
        },
        "transmit": {
          "type": "boolean",
          "description": "Does the device recogize this functions data"
        },
        "parts": {
          "type": "array",
          "description": "A breakdown of the parts in the sysex data.",
          "items": {
            "$ref": "#/definitions/parts"
          }
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    
    "sysexDefinitions": {
      "type": "object",
      "description": "Holds the relative paths to the individual Sysex calls as given by the Function Id.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        },
        "^[0-9a-zA-Z]": {
          "type": "array",
          "description": "A breakdown of the parts in the sysex data.",
          "items": {
            "$ref": "#/definitions/parts"
          }
        }
      },
      "additionalProperties": false
    },
    "parts": {
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "name": {
          "type": "string",
          "description": "How many bytes to read. If not set it is assumed to only read 1 byte."
        },
        "length": {
          "type": "integer",
          "description": "How many bytes to read. If not set it is assumed to only read 1 byte."
        },
        "lengthExpr": {
          "type": "string",
          "format": "expr",
          "description": "The expression to determine the length to get from the data"
        },
        "ifExpr": {
          "type": "string",
          "format": "expr",
          "description": "The expression to determine if we should retrieve this data - if false do not move to the next byte"
        },
        "type": {
          "type": "string",
          "description": "The value MUST be one of \"string\", \"number\", \"integer\" or \"boolean\". If not set integer is assumed.",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean"
          ]
        },
         "format": {
          "type": "string",
          "description": "This is the format of the data returned. i.e. note."
        },
        "repeat": {
          "type": "integer",
          "description": "How many times are we going to read this byte and length. This is useful where the docmentation ask to read x amount of the same param."
        },
        "repeatTitles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The title of each repeat. The length of this array MUST match the repeat value."
        },
        "suffix": {
          "type": "string",
          "description": "This helps for human readability when display the data."
        },
        "offset": {
          "type": "integer",
          "description": "This will adjust the value for visual display."
        },
        "expr": {
          "type": "string",
          "format": "expr",
          "description": "The expression to determine the values from the data"
        },
        "revExpr": {
          "type": "string",
          "format": "expr",
          "description": "The expression to determine the data from the values"
        },
        "max": {
          "type": "integer",
          "description": "The maximum number that should be set. Max is checked before after expr and before revExpr."
        },
        "min": {
          "type": "integer",
          "description": "The minimum number that should be set. Min is checked before after expr and before revExpr."
        },
        "map": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Map the value to this array of Strings to make it more human friendly."
        },
        
        "parts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/parts"
          },
          "description": "This is required if the type is set to array."
        },
        "bitParts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bitParts"
          },
          "description": "Break down the value into indiviual bit ranges."
        },
        
        "schema": {
          "$ref": "#/definitions/schema"
        }
      }
    },
    
    
    
    
    
    "bitParts": {
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "required":["bit","length"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of value"
        },
        "start": {
          "type": "integer",
          "description": "Start reading bits from."
        },
        "length": {
          "type": "integer",
          "description": "How many bits to read."
        },
        
        "ifExpr": {
          "type": "string",
          "format": "expr",
          "description": "The expression to determine if we should retrieve this data - if false do not move to the next byte"
        },
        "type": {
          "type": "string",
          "description": "The value MUST be one of \"string\", \"number\", \"integer\" or \"boolean\". If not set integer is assumed.",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean"
          ]
        },
         "format": {
          "type": "string",
          "description": "This is the format of the data returned. i.e. note."
        },
        "repeat": {
          "type": "integer",
          "description": "How many times are we going to read this byte and length. This is useful where the docmentation ask to read x amount of the same param."
        },
        "repeatTitles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The title of each repeat. The length of this array MUST match the repeat value."
        },
        "suffix": {
          "type": "string",
          "description": "This helps for human readability when display the data."
        },
        "offset": {
          "type": "integer",
          "description": "This will adjust the value for visual display."
        },
        "expr": {
          "type": "string",
          "format": "expr",
          "description": "The expression to determine the values from the data"
        },
        "revExpr": {
          "type": "string",
          "format": "expr",
          "description": "The expression to determine the data from the values"
        },
        "max": {
          "type": "integer",
          "description": "The maximum number that should be set. Max is checked before after expr and before revExpr."
        },
        "min": {
          "type": "integer",
          "description": "The minimum number that should be set. Min is checked before after expr and before revExpr."
        },
        "map": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Map the value to this array of Strings to make it more human friendly."
        }
        
        
        
       
      }
    },
    
    
    
    
    "vendorExtension": {
      "description": "Any property starting with x- is valid.",
      "additionalProperties": true,
      "additionalItems": true
    },
    "schema": {
      "type": "object",
      "description": "A deterministic version of a JSON Schema object.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "$ref": {
          "type": "string"
        },
        "title": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/title"
        }
      },
      "additionalProperties": false
    }
  }
}
